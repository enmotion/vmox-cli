#!/usr/bin/env node
const { execSync } = require('child_process');
const { program } = require('commander');
const inquirer = require('inquirer');
const fsExtra = require('fs-extra');
const { replaceContentToFile, handleError } = require("./lib/index");

program.version('1.0.0');

const repository = "https://gitee.com/enmotion/vmox-base.git";

program
  .command('create <appName>')
  .description('Create a new vmox project')
  .action((appName) => {
    inquirer
      .prompt([
        {
          type: 'input',
          name: 'appName',
          message: 'Enter appName:',
        },
        {
          type: 'input',
          name: 'author',
          message: 'Enter author:',
        },
      ])
      .then(async (userOptionAnswers) => {
        const needReplaceFiles = ['./package.json','./README.md'];
        const replaceValueMapping = [
          {k:'appName',v:'::app-name::'},
          {k:'author',v:'::author::'}
        ];
        try {
          // 创建项目的文件夹，当前位置必须没有该文件夹方可创建
          fsExtra.pathExists(`./${appName}`,(err,exists)=>{
            if (err) {
              console.log(`Error:${err.message}`);
              return;
            };
            if(!exists) {
              execSync(`mkdir -p ${appName}`); // 创建文件夹
              process.chdir(appName); // 进入创建文件夹
              console.log("Copy project code to local ...");
              execSync(`git clone ${repository} vmox-base`);
              console.log("Pull code completed");
              const excludedFolders = ['.git']; // 忽视文件夹
              // 定义过滤器函数
              function filterFunc(source, destination) {
                const folderName = source.substring(source.lastIndexOf('/') + 1); // 根据路径获取文件夹名称
                return !excludedFolders.includes(folderName);
              };
              fsExtra.copy("./vmox-base", "./", { filter: filterFunc })
              .then(() => {
                console.log('init complete');
                fsExtra.removeSync('vmox-base');
              })
              .then(()=>{
                needReplaceFiles.forEach(path=>{
                  replaceContentToFile(path,replaceValueMapping,userOptionAnswers);
                })
              })
              .catch((err) => {
                console.error(err);
              }); //
            } else {
              throw Error(`${appName} is already existed`);
            }
          });
        } catch (error) {
          handleError(error);
        }
      });
  });

program.parse(process.argv);
